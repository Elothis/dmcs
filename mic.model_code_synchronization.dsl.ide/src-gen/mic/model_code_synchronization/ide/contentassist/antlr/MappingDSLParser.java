/*
 * generated by Xtext 2.18.0
 */
package mic.model_code_synchronization.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mic.model_code_synchronization.ide.contentassist.antlr.internal.InternalMappingDSLParser;
import mic.model_code_synchronization.services.MappingDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MappingDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MappingDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MappingDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getCodeStructureTypeAccess().getAlternatives(), "rule__CodeStructureType__Alternatives");
			builder.put(grammarAccess.getModelElementTypeAccess().getAlternatives(), "rule__ModelElementType__Alternatives");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_0(), "rule__IntegrationMechanismDeclaration__Group_0__0");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_3(), "rule__IntegrationMechanismDeclaration__Group_3__0");
			builder.put(grammarAccess.getCodestructureAccess().getGroup(), "rule__Codestructure__Group__0");
			builder.put(grammarAccess.getModelElementAccess().getGroup(), "rule__ModelElement__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
			builder.put(grammarAccess.getMappingInstantiationAccess().getGroup(), "rule__MappingInstantiation__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getNameAssignment_0_1(), "rule__IntegrationMechanismDeclaration__NameAssignment_0_1");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getCodestructureAssignment_0_3(), "rule__IntegrationMechanismDeclaration__CodestructureAssignment_0_3");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getModelelementAssignment_1(), "rule__IntegrationMechanismDeclaration__ModelelementAssignment_1");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getConditionAssignment_2(), "rule__IntegrationMechanismDeclaration__ConditionAssignment_2");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getMappingAssignment_3_0(), "rule__IntegrationMechanismDeclaration__MappingAssignment_3_0");
			builder.put(grammarAccess.getCodestructureAccess().getCodestructureAssignment_2(), "rule__Codestructure__CodestructureAssignment_2");
			builder.put(grammarAccess.getModelElementAccess().getModelelementAssignment_2(), "rule__ModelElement__ModelelementAssignment_2");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_2(), "rule__Condition__ConditionAssignment_2");
			builder.put(grammarAccess.getMappingAccess().getMappingAssignment_2(), "rule__Mapping__MappingAssignment_2");
			builder.put(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), "rule__IntegrationMechanismDeclaration__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MappingDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMappingDSLParser createParser() {
		InternalMappingDSLParser result = new InternalMappingDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MappingDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MappingDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
