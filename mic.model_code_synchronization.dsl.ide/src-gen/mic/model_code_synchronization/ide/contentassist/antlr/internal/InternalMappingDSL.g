/*
 * generated by Xtext 2.18.0
 */
grammar InternalMappingDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package mic.model_code_synchronization.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package mic.model_code_synchronization.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import mic.model_code_synchronization.services.MappingDSLGrammarAccess;

}
@parser::members {
	private MappingDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(MappingDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
		(rule__Model__ElementsAssignment)*
		{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
		(rule__AbstractElement__Alternatives)
		{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegrationMechanismDeclaration
entryRuleIntegrationMechanismDeclaration
:
{ before(grammarAccess.getIntegrationMechanismDeclarationRule()); }
	 ruleIntegrationMechanismDeclaration
{ after(grammarAccess.getIntegrationMechanismDeclarationRule()); } 
	 EOF 
;

// Rule IntegrationMechanismDeclaration
ruleIntegrationMechanismDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup()); }
		(rule__IntegrationMechanismDeclaration__UnorderedGroup)
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCodestructure
entryRuleCodestructure
:
{ before(grammarAccess.getCodestructureRule()); }
	 ruleCodestructure
{ after(grammarAccess.getCodestructureRule()); } 
	 EOF 
;

// Rule Codestructure
ruleCodestructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCodestructureAccess().getGroup()); }
		(rule__Codestructure__Group__0)
		{ after(grammarAccess.getCodestructureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModelElement
entryRuleModelElement
:
{ before(grammarAccess.getModelElementRule()); }
	 ruleModelElement
{ after(grammarAccess.getModelElementRule()); } 
	 EOF 
;

// Rule ModelElement
ruleModelElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelElementAccess().getGroup()); }
		(rule__ModelElement__Group__0)
		{ after(grammarAccess.getModelElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getGroup()); }
		(rule__Mapping__Group__0)
		{ after(grammarAccess.getMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMappingInstantiation
entryRuleMappingInstantiation
:
{ before(grammarAccess.getMappingInstantiationRule()); }
	 ruleMappingInstantiation
{ after(grammarAccess.getMappingInstantiationRule()); } 
	 EOF 
;

// Rule MappingInstantiation
ruleMappingInstantiation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingInstantiationAccess().getGroup()); }
		(rule__MappingInstantiation__Group__0)
		{ after(grammarAccess.getMappingInstantiationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CodeStructureType
ruleCodeStructureType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodeStructureTypeAccess().getAlternatives()); }
		(rule__CodeStructureType__Alternatives)
		{ after(grammarAccess.getCodeStructureTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ModelElementType
ruleModelElementType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelElementTypeAccess().getAlternatives()); }
		(rule__ModelElementType__Alternatives)
		{ after(grammarAccess.getModelElementTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getIntegrationMechanismDeclarationParserRuleCall_0()); }
		ruleIntegrationMechanismDeclaration
		{ after(grammarAccess.getAbstractElementAccess().getIntegrationMechanismDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getMappingInstantiationParserRuleCall_1()); }
		ruleMappingInstantiation
		{ after(grammarAccess.getAbstractElementAccess().getMappingInstantiationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeStructureType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodeStructureTypeAccess().getCLASSEnumLiteralDeclaration_0()); }
		('class')
		{ after(grammarAccess.getCodeStructureTypeAccess().getCLASSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCodeStructureTypeAccess().getMETHODEnumLiteralDeclaration_1()); }
		('method')
		{ after(grammarAccess.getCodeStructureTypeAccess().getMETHODEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelElementTypeAccess().getCLASSEnumLiteralDeclaration_0()); }
		('class')
		{ after(grammarAccess.getModelElementTypeAccess().getCLASSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelElementTypeAccess().getMETHODEnumLiteralDeclaration_1()); }
		('method')
		{ after(grammarAccess.getModelElementTypeAccess().getMETHODEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_0__0__Impl
	rule__IntegrationMechanismDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getIMKeyword_0_0()); }
	'IM'
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getIMKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_0__1__Impl
	rule__IntegrationMechanismDeclaration__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getNameAssignment_0_1()); }
	(rule__IntegrationMechanismDeclaration__NameAssignment_0_1)
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_0__2__Impl
	rule__IntegrationMechanismDeclaration__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getLeftCurlyBracketKeyword_0_2()); }
	'{'
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getLeftCurlyBracketKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getCodestructureAssignment_0_3()); }
	(rule__IntegrationMechanismDeclaration__CodestructureAssignment_0_3)
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getCodestructureAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegrationMechanismDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_3__0__Impl
	rule__IntegrationMechanismDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getMappingAssignment_3_0()); }
	(rule__IntegrationMechanismDeclaration__MappingAssignment_3_0)
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getMappingAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getRightCurlyBracketKeyword_3_1()); }
	'}'
	{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getRightCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Codestructure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Codestructure__Group__0__Impl
	rule__Codestructure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodestructureAccess().getCodestructureKeyword_0()); }
	'codestructure'
	{ after(grammarAccess.getCodestructureAccess().getCodestructureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Codestructure__Group__1__Impl
	rule__Codestructure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodestructureAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCodestructureAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Codestructure__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodestructureAccess().getCodestructureAssignment_2()); }
	(rule__Codestructure__CodestructureAssignment_2)
	{ after(grammarAccess.getCodestructureAccess().getCodestructureAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelElement__Group__0__Impl
	rule__ModelElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelElementAccess().getModelelementKeyword_0()); }
	'modelelement'
	{ after(grammarAccess.getModelElementAccess().getModelelementKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelElement__Group__1__Impl
	rule__ModelElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelElementAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getModelElementAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelElementAccess().getModelelementAssignment_2()); }
	(rule__ModelElement__ModelelementAssignment_2)
	{ after(grammarAccess.getModelElementAccess().getModelelementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionKeyword_0()); }
	'condition'
	{ after(grammarAccess.getConditionAccess().getConditionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getConditionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAssignment_2()); }
	(rule__Condition__ConditionAssignment_2)
	{ after(grammarAccess.getConditionAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getMappingKeyword_0()); }
	'mapping'
	{ after(grammarAccess.getMappingAccess().getMappingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getMappingAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getMappingAssignment_2()); }
	(rule__Mapping__MappingAssignment_2)
	{ after(grammarAccess.getMappingAccess().getMappingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MappingInstantiation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingInstantiation__Group__0__Impl
	rule__MappingInstantiation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingInstantiation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingInstantiationAccess().getMappingKeyword_0()); }
	'Mapping'
	{ after(grammarAccess.getMappingInstantiationAccess().getMappingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingInstantiation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingInstantiation__Group__1__Impl
	rule__MappingInstantiation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingInstantiation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingInstantiationAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getMappingInstantiationAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingInstantiation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingInstantiation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingInstantiation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingInstantiationAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getMappingInstantiationAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegrationMechanismDeclaration__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup());
	}
:
	rule__IntegrationMechanismDeclaration__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_0()); }
					(rule__IntegrationMechanismDeclaration__Group_0__0)
					{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getModelelementAssignment_1()); }
					(rule__IntegrationMechanismDeclaration__ModelelementAssignment_1)
					{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getModelelementAssignment_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getConditionAssignment_2()); }
					(rule__IntegrationMechanismDeclaration__ConditionAssignment_2)
					{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getConditionAssignment_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_3()); }
					(rule__IntegrationMechanismDeclaration__Group_3__0)
					{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getGroup_3()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getIntegrationMechanismDeclarationAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__UnorderedGroup__Impl
	rule__IntegrationMechanismDeclaration__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__UnorderedGroup__Impl
	rule__IntegrationMechanismDeclaration__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__UnorderedGroup__Impl
	rule__IntegrationMechanismDeclaration__UnorderedGroup__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__UnorderedGroup__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegrationMechanismDeclaration__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getModelAccess().getElementsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__CodestructureAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getCodestructureCodestructureParserRuleCall_0_3_0()); }
		ruleCodestructure
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getCodestructureCodestructureParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__ModelelementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getModelelementModelElementParserRuleCall_1_0()); }
		ruleModelElement
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getModelelementModelElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getConditionConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getConditionConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegrationMechanismDeclaration__MappingAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegrationMechanismDeclarationAccess().getMappingMappingParserRuleCall_3_0_0()); }
		ruleMapping
		{ after(grammarAccess.getIntegrationMechanismDeclarationAccess().getMappingMappingParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Codestructure__CodestructureAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodestructureAccess().getCodestructureCodeStructureTypeEnumRuleCall_2_0()); }
		ruleCodeStructureType
		{ after(grammarAccess.getCodestructureAccess().getCodestructureCodeStructureTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__ModelelementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelElementAccess().getModelelementModelElementTypeEnumRuleCall_2_0()); }
		ruleModelElementType
		{ after(grammarAccess.getModelElementAccess().getModelelementModelElementTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__MappingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getMappingSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getMappingAccess().getMappingSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
