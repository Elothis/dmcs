/*
 * generated by Xtext 2.18.0
 */
package mic.model_code_synchronization.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MappingDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		////import "http://www.example.org/designmodel"
		//Model:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegrationMechanismDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingInstantiationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	IntegrationMechanismDeclaration | MappingInstantiation;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegrationMechanismDeclaration | MappingInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegrationMechanismDeclaration
		public RuleCall getIntegrationMechanismDeclarationParserRuleCall_0() { return cIntegrationMechanismDeclarationParserRuleCall_0; }
		
		//MappingInstantiation
		public RuleCall getMappingInstantiationParserRuleCall_1() { return cMappingInstantiationParserRuleCall_1; }
	}
	public class IntegrationMechanismDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.IntegrationMechanismDeclaration");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cIMKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cCodestructureAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCodestructureCodestructureParserRuleCall_0_3_0 = (RuleCall)cCodestructureAssignment_0_3.eContents().get(0);
		private final Assignment cModelelementAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cModelelementModelElementParserRuleCall_1_0 = (RuleCall)cModelelementAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Assignment cMappingAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMappingMappingParserRuleCall_3_0_0 = (RuleCall)cMappingAssignment_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//IntegrationMechanismDeclaration:
		//	'IM' name=ID '{'
		//	codestructure=Codestructure & modelelement=ModelElement & condition=Condition & mapping=Mapping
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IM' name=ID '{' codestructure=Codestructure & modelelement=ModelElement & condition=Condition & mapping=Mapping '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'IM' name=ID '{' codestructure=Codestructure
		public Group getGroup_0() { return cGroup_0; }
		
		//'IM'
		public Keyword getIMKeyword_0_0() { return cIMKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//codestructure=Codestructure
		public Assignment getCodestructureAssignment_0_3() { return cCodestructureAssignment_0_3; }
		
		//Codestructure
		public RuleCall getCodestructureCodestructureParserRuleCall_0_3_0() { return cCodestructureCodestructureParserRuleCall_0_3_0; }
		
		//modelelement=ModelElement
		public Assignment getModelelementAssignment_1() { return cModelelementAssignment_1; }
		
		//ModelElement
		public RuleCall getModelelementModelElementParserRuleCall_1_0() { return cModelelementModelElementParserRuleCall_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//mapping=Mapping '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//mapping=Mapping
		public Assignment getMappingAssignment_3_0() { return cMappingAssignment_3_0; }
		
		//Mapping
		public RuleCall getMappingMappingParserRuleCall_3_0_0() { return cMappingMappingParserRuleCall_3_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}
	public class CodestructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.Codestructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodestructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodestructureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodestructureCodeStructureTypeEnumRuleCall_2_0 = (RuleCall)cCodestructureAssignment_2.eContents().get(0);
		
		//Codestructure:
		//	'codestructure' ':' codestructure=CodeStructureType;
		@Override public ParserRule getRule() { return rule; }
		
		//'codestructure' ':' codestructure=CodeStructureType
		public Group getGroup() { return cGroup; }
		
		//'codestructure'
		public Keyword getCodestructureKeyword_0() { return cCodestructureKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//codestructure=CodeStructureType
		public Assignment getCodestructureAssignment_2() { return cCodestructureAssignment_2; }
		
		//CodeStructureType
		public RuleCall getCodestructureCodeStructureTypeEnumRuleCall_2_0() { return cCodestructureCodeStructureTypeEnumRuleCall_2_0; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.ModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelelementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelelementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelelementModelElementTypeEnumRuleCall_2_0 = (RuleCall)cModelelementAssignment_2.eContents().get(0);
		
		//ModelElement:
		//	'modelelement' ':' modelelement=ModelElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'modelelement' ':' modelelement=ModelElementType
		public Group getGroup() { return cGroup; }
		
		//'modelelement'
		public Keyword getModelelementKeyword_0() { return cModelelementKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//modelelement=ModelElementType
		public Assignment getModelelementAssignment_2() { return cModelelementAssignment_2; }
		
		//ModelElementType
		public RuleCall getModelelementModelElementTypeEnumRuleCall_2_0() { return cModelelementModelElementTypeEnumRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Condition:
		//	'condition' ':' condition=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' ':' condition=STRING
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_2_0() { return cConditionSTRINGTerminalRuleCall_2_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingSTRINGTerminalRuleCall_2_0 = (RuleCall)cMappingAssignment_2.eContents().get(0);
		
		//Mapping:
		//	'mapping' ':' mapping=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' ':' mapping=STRING
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//mapping=STRING
		public Assignment getMappingAssignment_2() { return cMappingAssignment_2; }
		
		//STRING
		public RuleCall getMappingSTRINGTerminalRuleCall_2_0() { return cMappingSTRINGTerminalRuleCall_2_0; }
	}
	public class MappingInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.MappingInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MappingInstantiation:
		//	'Mapping' '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mapping' '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'Mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	public class CodeStructureTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.CodeStructureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSClassKeyword_0_0 = (Keyword)cCLASSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMETHODEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMETHODMethodKeyword_1_0 = (Keyword)cMETHODEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CodeStructureType:
		//	CLASS='class' | METHOD='method';
		public EnumRule getRule() { return rule; }
		
		//CLASS='class' | METHOD='method'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CLASS='class'
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_0() { return cCLASSEnumLiteralDeclaration_0; }
		
		//'class'
		public Keyword getCLASSClassKeyword_0_0() { return cCLASSClassKeyword_0_0; }
		
		//METHOD='method'
		public EnumLiteralDeclaration getMETHODEnumLiteralDeclaration_1() { return cMETHODEnumLiteralDeclaration_1; }
		
		//'method'
		public Keyword getMETHODMethodKeyword_1_0() { return cMETHODMethodKeyword_1_0; }
	}
	public class ModelElementTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mic.model_code_synchronization.MappingDSL.ModelElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSClassKeyword_0_0 = (Keyword)cCLASSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMETHODEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMETHODMethodKeyword_1_0 = (Keyword)cMETHODEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ModelElementType:
		//	CLASS='class' | METHOD='method';
		public EnumRule getRule() { return rule; }
		
		//CLASS='class' | METHOD='method'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CLASS='class'
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_0() { return cCLASSEnumLiteralDeclaration_0; }
		
		//'class'
		public Keyword getCLASSClassKeyword_0_0() { return cCLASSClassKeyword_0_0; }
		
		//METHOD='method'
		public EnumLiteralDeclaration getMETHODEnumLiteralDeclaration_1() { return cMETHODEnumLiteralDeclaration_1; }
		
		//'method'
		public Keyword getMETHODMethodKeyword_1_0() { return cMETHODMethodKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final IntegrationMechanismDeclarationElements pIntegrationMechanismDeclaration;
	private final CodestructureElements pCodestructure;
	private final CodeStructureTypeElements eCodeStructureType;
	private final ModelElementElements pModelElement;
	private final ModelElementTypeElements eModelElementType;
	private final ConditionElements pCondition;
	private final MappingElements pMapping;
	private final MappingInstantiationElements pMappingInstantiation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MappingDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pIntegrationMechanismDeclaration = new IntegrationMechanismDeclarationElements();
		this.pCodestructure = new CodestructureElements();
		this.eCodeStructureType = new CodeStructureTypeElements();
		this.pModelElement = new ModelElementElements();
		this.eModelElementType = new ModelElementTypeElements();
		this.pCondition = new ConditionElements();
		this.pMapping = new MappingElements();
		this.pMappingInstantiation = new MappingInstantiationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mic.model_code_synchronization.MappingDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.example.org/designmodel"
	//Model:
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//	IntegrationMechanismDeclaration | MappingInstantiation;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//IntegrationMechanismDeclaration:
	//	'IM' name=ID '{'
	//	codestructure=Codestructure & modelelement=ModelElement & condition=Condition & mapping=Mapping
	//	'}';
	public IntegrationMechanismDeclarationElements getIntegrationMechanismDeclarationAccess() {
		return pIntegrationMechanismDeclaration;
	}
	
	public ParserRule getIntegrationMechanismDeclarationRule() {
		return getIntegrationMechanismDeclarationAccess().getRule();
	}
	
	//Codestructure:
	//	'codestructure' ':' codestructure=CodeStructureType;
	public CodestructureElements getCodestructureAccess() {
		return pCodestructure;
	}
	
	public ParserRule getCodestructureRule() {
		return getCodestructureAccess().getRule();
	}
	
	//enum CodeStructureType:
	//	CLASS='class' | METHOD='method';
	public CodeStructureTypeElements getCodeStructureTypeAccess() {
		return eCodeStructureType;
	}
	
	public EnumRule getCodeStructureTypeRule() {
		return getCodeStructureTypeAccess().getRule();
	}
	
	//ModelElement:
	//	'modelelement' ':' modelelement=ModelElementType;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//enum ModelElementType:
	//	CLASS='class' | METHOD='method';
	public ModelElementTypeElements getModelElementTypeAccess() {
		return eModelElementType;
	}
	
	public EnumRule getModelElementTypeRule() {
		return getModelElementTypeAccess().getRule();
	}
	
	//Condition:
	//	'condition' ':' condition=STRING;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Mapping:
	//	'mapping' ':' mapping=STRING;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//MappingInstantiation:
	//	'Mapping' '{'
	//	'}';
	public MappingInstantiationElements getMappingInstantiationAccess() {
		return pMappingInstantiation;
	}
	
	public ParserRule getMappingInstantiationRule() {
		return getMappingInstantiationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
