/**
 * generated by Xtext 2.18.0
 */
package mic.model_code_synchronization.mappingDSL.impl;

import mic.model_code_synchronization.mappingDSL.MappingDSLPackage;
import mic.model_code_synchronization.mappingDSL.ModelElement;
import mic.model_code_synchronization.mappingDSL.ModelElementType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mic.model_code_synchronization.mappingDSL.impl.ModelElementImpl#getModelelement <em>Modelelement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelElementImpl extends MinimalEObjectImpl.Container implements ModelElement
{
  /**
   * The default value of the '{@link #getModelelement() <em>Modelelement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelelement()
   * @generated
   * @ordered
   */
  protected static final ModelElementType MODELELEMENT_EDEFAULT = ModelElementType.CLASS;

  /**
   * The cached value of the '{@link #getModelelement() <em>Modelelement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelelement()
   * @generated
   * @ordered
   */
  protected ModelElementType modelelement = MODELELEMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingDSLPackage.Literals.MODEL_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelElementType getModelelement()
  {
    return modelelement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModelelement(ModelElementType newModelelement)
  {
    ModelElementType oldModelelement = modelelement;
    modelelement = newModelelement == null ? MODELELEMENT_EDEFAULT : newModelelement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingDSLPackage.MODEL_ELEMENT__MODELELEMENT, oldModelelement, modelelement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingDSLPackage.MODEL_ELEMENT__MODELELEMENT:
        return getModelelement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingDSLPackage.MODEL_ELEMENT__MODELELEMENT:
        setModelelement((ModelElementType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingDSLPackage.MODEL_ELEMENT__MODELELEMENT:
        setModelelement(MODELELEMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingDSLPackage.MODEL_ELEMENT__MODELELEMENT:
        return modelelement != MODELELEMENT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (modelelement: ");
    result.append(modelelement);
    result.append(')');
    return result.toString();
  }

} //ModelElementImpl
