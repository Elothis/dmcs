/**
 * generated by Xtext 2.18.0
 */
package mic.model_code_synchronization.mappingDSL.impl;

import mic.model_code_synchronization.mappingDSL.CodeStructureType;
import mic.model_code_synchronization.mappingDSL.Codestructure;
import mic.model_code_synchronization.mappingDSL.MappingDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Codestructure</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mic.model_code_synchronization.mappingDSL.impl.CodestructureImpl#getCodestructure <em>Codestructure</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CodestructureImpl extends MinimalEObjectImpl.Container implements Codestructure
{
  /**
   * The default value of the '{@link #getCodestructure() <em>Codestructure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodestructure()
   * @generated
   * @ordered
   */
  protected static final CodeStructureType CODESTRUCTURE_EDEFAULT = CodeStructureType.CLASS;

  /**
   * The cached value of the '{@link #getCodestructure() <em>Codestructure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodestructure()
   * @generated
   * @ordered
   */
  protected CodeStructureType codestructure = CODESTRUCTURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CodestructureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingDSLPackage.Literals.CODESTRUCTURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeStructureType getCodestructure()
  {
    return codestructure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCodestructure(CodeStructureType newCodestructure)
  {
    CodeStructureType oldCodestructure = codestructure;
    codestructure = newCodestructure == null ? CODESTRUCTURE_EDEFAULT : newCodestructure;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingDSLPackage.CODESTRUCTURE__CODESTRUCTURE, oldCodestructure, codestructure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingDSLPackage.CODESTRUCTURE__CODESTRUCTURE:
        return getCodestructure();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingDSLPackage.CODESTRUCTURE__CODESTRUCTURE:
        setCodestructure((CodeStructureType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingDSLPackage.CODESTRUCTURE__CODESTRUCTURE:
        setCodestructure(CODESTRUCTURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingDSLPackage.CODESTRUCTURE__CODESTRUCTURE:
        return codestructure != CODESTRUCTURE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (codestructure: ");
    result.append(codestructure);
    result.append(')');
    return result.toString();
  }

} //CodestructureImpl
